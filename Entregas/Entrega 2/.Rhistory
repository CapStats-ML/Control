sub = 'Tiempo entre asesinatos', font.sub = 2, cex.sub = 0.8, fg = '#423f32', col.sub = '#ff6f61')
# Líneas de guía
abline(h = seq(-3, 3, 0.25), col = '#d6c6b8', lty = 'dotted')
abline(v = seq(0, 30, 2.5), col = '#d6c6b8', lty = 'dotted')
# Líneas de control superior e inferior
abline(h = UCL_rango, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
abline(h = LCL_rango, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
# Línea central (valor nominal de Z = 0)
abline(h = media_rango, col = '#6b8e8e', lwd = 1.2)
# Leyenda
legend(x = 20, y = -0.5 , legend = c('UCL & LCL', 'Obs', 'LC'), title = 'Lineas',
col = c('#ff6f61', '#423f32', '#6b8e8e'), lty = c('dashed', 'solid', 'solid'),
lwd = c(1.8, 1.8, 1.8), cex = 0.8, bty = 'n', bg = 'white', text.font = 2,
text.col = '#423f32')
# Crear el QQ plot con estilos personalizados
qqnorm(Trans, main = "QQ Plot Periodo Transformado", col = '#423f32',  pch = 20, cex = 1.5,
family = "sans", bty = "L", xlab = "Cuantiles teóricos", ylab = "Cuantiles de los datos",
font.lab = 2, cex.lab = 0.8, font = 3, font.main = 4, col.main = 'black', cex.axis = 0.7)
# Añadir línea de referencia con estilo personalizado
qqline(Trans, col = '#6b8e8e', lwd = 1.2)
# Añadir líneas de guía
abline(h = seq(0, 3.5, 0.25), col = '#d6c6b8', lty = 'dotted')
abline(v = seq(-3, 3, 0.5), col = '#d6c6b8', lty = 'dotted')
# Añadir leyenda
legend(x = 1, y = 1.25, legend = c('Tendencia', 'Observaciones'), col = c('#6b8e8e', '#423f32'),
lty = c('solid', 'none'), pch = c(NA, 20), lwd = c(1.2, NA), cex = 0.8, bty = 'n',
bg = 'white', text.font = 2, text.col = '#423f32')
# Grafica QQplot
# Configurar márgenes y fondo
par(mar = c(5.1, 5.1, 4.1, 2.1), bg = 'white')
# Crear el QQ plot con estilos personalizados
qqnorm(Periodo1$DaysBetween, main = "QQ Plot tiempo entre Asesinatos", col = '#423f32',  pch = 20, cex = 1.5,
family = "sans", bty = "L", xlab = "Cuantiles teóricos", ylab = "Cuantiles de los datos",
font.lab = 2, cex.lab = 0.8, font = 3, font.main = 4, col.main = 'black', cex.axis = 0.7)
# Añadir línea de referencia con estilo personalizado
qqline(Periodo1$DaysBetween, col = '#6b8e8e', lwd = 1.2)
# Añadir líneas de guía
abline(h = seq(0, 35, 5), col = '#d6c6b8', lty = 'dotted')
abline(v = seq(-3, 3, 0.5), col = '#d6c6b8', lty = 'dotted')
# Añadir leyenda
legend(x = 1, y = 5, legend = c('Tendencia', 'Observaciones'), col = c('#6b8e8e', '#423f32'),
lty = c('solid', 'none'), pch = c(NA, 20), lwd = c(1.2, NA), cex = 0.8, bty = 'n',
bg = 'white', text.font = 2, text.col = '#423f32')
media <- mean(Periodo1$DaysBetween)
sd <- sd(Periodo1$DaysBetween)
# Límites de Control
UCL <- media + 3 * sd
LCL <- max(media - 3 * sd, 0)
par(mar = c(5.1, 5.1, 4.1, 2.1), bg = '#fffbf7') # Configurar márgenes y fondo
plot(Periodo1$DaysBetween, type = 'o', col = '#423f32', pch = 20, cex = 1.5, ylim = c(LCL, UCL), family = "sans", bty = "L",
xlab = 'Observacion Temporal', ylab = 'Tiempo entre Ass \n Tranformadas',  font.lab = 2, cex.lab = 0.8,
font = 3, font.main = 4, main = 'Carta de control observaciones', cex.axis = 0.7, col.main = 'black',
sub = 'Tiempo entre asesinatos', font.sub = 2, cex.sub = 0.8, fg = '#423f32', col.sub = '#ff6f61')
# Líneas de guía
abline(h = seq(-30, 50, 5), col = '#d6c6b8', lty = 'dotted')
abline(v = seq(0, 30, 2.5), col = '#d6c6b8', lty = 'dotted')
# Líneas de control superior e inferior
abline(h = UCL, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
abline(h = LCL, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
# Línea central (valor nominal de Z = 0)
abline(h = media, col = '#6b8e8e', lwd = 1.2)
# Leyenda
legend(x = 20, y = 45 , legend = c('UCL & LCL', 'Obs', 'LC'), title = 'Lineas',
col = c('#ff6f61', '#423f32', '#6b8e8e'), lty = c('dashed', 'solid', 'solid'),
lwd = c(1.8, 1.8, 1.8), cex = 0.8, bty = 'n', bg = 'white', text.font = 2,
text.col = '#423f32')
k <- 2
rango_movil <- sapply(1:(length(Periodo1$DaysBetween) - k + 1), function(i) max(Periodo1$DaysBetween[i:(i + k - 1)]) - min(Periodo1$DaysBetween[i:(i + k - 1)]))
# Media y desviación estándar de los rangos móviles
media_rango <- mean(rango_movil)
sd_rango <- sd(rango_movil)
# Límites de Control para la carta de rango móvil
UCL_rango <- media_rango + 3 * sd_rango
LCL_rango <- max(media_rango - 3 * sd_rango, 0)
par(mar = c(5.1, 5.1, 4.1, 2.1), bg = '#fffbf7') # Configurar márgenes y fondo
plot(rango_movil, type = 'o', col = '#423f32', pch = 20, cex = 1.5, ylim = c(LCL_rango - 1, UCL_rango + 1), family = "sans", bty = "L",
xlab = 'Observacion Temporal', ylab = 'Rango del tiempo\nEntre Asesinatos',  font.lab = 2, cex.lab = 0.8,
font = 3, font.main = 4, main = 'Carta de control MR', cex.axis = 0.7, col.main = 'black',
sub = 'Tiempo entre asesinatos', font.sub = 2, cex.sub = 0.8, fg = '#423f32', col.sub = '#ff6f61')
# Líneas de guía
abline(h = seq(-20, 40, 5), col = '#d6c6b8', lty = 'dotted')
abline(v = seq(0, 30, 2.5), col = '#d6c6b8', lty = 'dotted')
# Líneas de control superior e inferior
abline(h = UCL_rango, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
abline(h = LCL_rango, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
# Línea central (valor nominal de Z = 0)
abline(h = media_rango, col = '#6b8e8e', lwd = 1.2)
# Leyenda
legend(x = 20, y = 35 , legend = c('UCL & LCL', 'Obs', 'LC'), title = 'Lineas',
col = c('#ff6f61', '#423f32', '#6b8e8e'), lty = c('dashed', 'solid', 'solid'),
lwd = c(1.8, 1.8, 1.8), cex = 0.8, bty = 'n', bg = 'white', text.font = 2,
text.col = '#423f32')
Trans <- Periodo1$DaysBetween^(0.25)
# Grafica QQplot
# Configurar márgenes y fondo
par(mar = c(5.1, 5.1, 4.1, 2.1), bg = 'white')
# Crear el QQ plot con estilos personalizados
qqnorm(Trans, main = "QQ Plot Periodo Transformado", col = '#423f32',  pch = 20, cex = 1.5,
family = "sans", bty = "L", xlab = "Cuantiles teóricos", ylab = "Cuantiles de los datos",
font.lab = 2, cex.lab = 0.8, font = 3, font.main = 4, col.main = 'black', cex.axis = 0.7)
# Añadir línea de referencia con estilo personalizado
qqline(Trans, col = '#6b8e8e', lwd = 1.2)
# Añadir líneas de guía
abline(h = seq(0, 3.5, 0.25), col = '#d6c6b8', lty = 'dotted')
abline(v = seq(-3, 3, 0.5), col = '#d6c6b8', lty = 'dotted')
# Añadir leyenda
legend(x = 1, y = 1.25, legend = c('Tendencia', 'Observaciones'), col = c('#6b8e8e', '#423f32'),
lty = c('solid', 'none'), pch = c(NA, 20), lwd = c(1.2, NA), cex = 0.8, bty = 'n',
bg = 'white', text.font = 2, text.col = '#423f32')
media <- mean(Trans)
sd <- sd(Trans)
# Límites de Control
UCL <- media + 3 * sd
LCL <- media - 3 * sd
par(mar = c(5.1, 5.1, 4.1, 2.1), bg = '#fffbf7') # Configurar márgenes y fondo
plot(Trans, type = 'o', col = '#423f32', pch = 20, cex = 1.5, ylim = c(LCL, UCL), family = "sans", bty = "L",
xlab = 'Observacion Temporal', ylab = 'Tiempo entre Ass \n Tranformadas',  font.lab = 2, cex.lab = 0.8,
font = 3, font.main = 4, main = 'Carta de control Obs. Transformadas', cex.axis = 0.7, col.main = 'black',
sub = 'Tiempo entre asesinatos', font.sub = 2, cex.sub = 0.8, fg = '#423f32', col.sub = '#ff6f61')
# Líneas de guía
abline(h = seq(-3, 3, 0.5), col = '#d6c6b8', lty = 'dotted')
abline(v = seq(0, 30, 2.5), col = '#d6c6b8', lty = 'dotted')
# Líneas de control superior e inferior
abline(h = UCL, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
abline(h = LCL, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
# Línea central (valor nominal de Z = 0)
abline(h = media, col = '#6b8e8e', lwd = 1.2)
# Leyenda
legend(x = 20, y = 1 , legend = c('UCL & LCL', 'Obs', 'LC'), title = 'Lineas',
col = c('#ff6f61', '#423f32', '#6b8e8e'), lty = c('dashed', 'solid', 'solid'),
lwd = c(1.8, 1.8, 1.8), cex = 0.8, bty = 'n', bg = 'white', text.font = 2,
text.col = '#423f32')
k <- 2
rango_movil <- sapply(1:(length(Trans) - k + 1), function(i) max(Trans[i:(i + k - 1)]) - min(Trans[i:(i + k - 1)]))
# Media y desviación estándar de los rangos móviles
media_rango <- mean(rango_movil)
sd_rango <- sd(rango_movil)
# Límites de Control para la carta de rango móvil
UCL_rango <- media_rango + 3 * sd_rango
LCL_rango <- media_rango - 3 * sd_rango
par(mar = c(5.1, 5.1, 4.1, 2.1), bg = '#fffbf7') # Configurar márgenes y fondo
plot(rango_movil, type = 'o', col = '#423f32', pch = 20, cex = 1.5, ylim = c(LCL_rango - 1, UCL_rango + 1), family = "sans", bty = "L",
xlab = 'Observacion Temporal', ylab = 'Rango del tiempo\nEntre Asesinatos',  font.lab = 2, cex.lab = 0.8,
font = 3, font.main = 4, main = 'Carta de control MR', cex.axis = 0.7, col.main = 'black',
sub = 'Tiempo entre asesinatos', font.sub = 2, cex.sub = 0.8, fg = '#423f32', col.sub = '#ff6f61')
# Líneas de guía
abline(h = seq(-3, 3, 0.25), col = '#d6c6b8', lty = 'dotted')
abline(v = seq(0, 30, 2.5), col = '#d6c6b8', lty = 'dotted')
# Líneas de control superior e inferior
abline(h = UCL_rango, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
abline(h = LCL_rango, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
# Línea central (valor nominal de Z = 0)
abline(h = media_rango, col = '#6b8e8e', lwd = 1.2)
# Leyenda
legend(x = 20, y = -0.5 , legend = c('UCL & LCL', 'Obs', 'LC'), title = 'Lineas',
col = c('#ff6f61', '#423f32', '#6b8e8e'), lty = c('dashed', 'solid', 'solid'),
lwd = c(1.8, 1.8, 1.8), cex = 0.8, bty = 'n', bg = 'white', text.font = 2,
text.col = '#423f32')
n <- seq(200, 400, 50)   # Tamaños de muestra posibles
p0 <- 0.1                # Proporción nominal de no conformidad
m = 30                   # Cantidad de muestras a generar
set.seed(22)             # Fijar semilla para replicabilidad
# Generar tamaños de muestra aleatorios
tamaños = sample(x = n, size = m, replace = TRUE)
# Generar muestras de una distribución binomial
muestras = rbinom(n = m, size = tamaños, prob = p0)
# Calcular proporciones de no conformidad
proporciones = muestras / tamaños
UCL <- 3  # Límite de control superior
LCL <- -3 # Límite de control inferior
StanCC <- function(n, P, p0){
Zi <- (P - p0) / sqrt(p0 * (1 - p0) / n)
return(Zi)
}
# Calcular los valores Zi para cada muestra
Zi_values <- StanCC(tamaños, proporciones, p0)
par(mar = c(5.1, 5.1, 4.1, 2.1), bg = '#fffbf7') # Configurar márgenes y fondo
plot(Zi_values, type = 'o', col = '#423f32', pch = 20, cex = 1.5, ylim = c(LCL, UCL), family = "sans", bty = "L",
xlab = 'Tiempo de medición', ylab = 'Valor de Zi para \n Prop. No Conformidad',  font.lab = 2, cex.lab = 0.8,
font = 3, font.main = 4, main = 'Carta de control Z con límites variables', cex.axis = 0.7, col.main = 'black',
sub = 'Proporción de no conformidad p = 0.1', font.sub = 2, cex.sub = 0.8, fg = '#423f32', col.sub = '#ff6f61')
# Líneas de guía
abline(h = seq(-3, 3, 0.5), col = '#d6c6b8', lty = 'dotted')
abline(v = seq(1, m, 5), col = '#d6c6b8', lty = 'dotted')
# Líneas de control superior e inferior
abline(h = UCL, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
abline(h = LCL, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
# Línea central (valor nominal de Z = 0)
abline(h = 0, col = '#6b8e8e', lwd = 1.2)
# Leyenda
legend(x = 25, y = -1.5 , legend = c('UCL & LCL', 'Obs', 'LC'), title = 'Lineas',
col = c('#ff6f61', '#423f32', '#6b8e8e'), lty = c('dashed', 'solid', 'solid'),
lwd = c(1.8, 1.8, 1.8), cex = 0.8, bty = 'n', bg = 'white', text.font = 2,
text.col = '#423f32')
ARL <- function(Zi_values, UCL, LCL){
ARL <- 0
for (i in 1:length(Zi_values)){
if (Zi_values[i] > UCL | Zi_values[i] < LCL){
ARL <- ARL + 1
}
}
return(ARL)
}
ARL(Zi_values, UCL, LCL)
# Función para calcular la probabilidad de estar dentro de los límites de control
Prob_in_control <- function(p0, n){
# Cálculo de Z utilizando la proporción nominal p0
LCL <- -3  # Límite inferior
UCL <- 3   # Límite superior
# La probabilidad de que Z esté dentro de los límites sigue una distribución normal estándar
P_in_control <- pnorm(UCL, mean = 0, sd = 1) - pnorm(LCL, mean = 0, sd = 1)
return(P_in_control)
}
# Calcular el ARL bajo control
P_in_control <- Prob_in_control(p0, tamaños)
ARL_bajo_control <- 1 / (1 - P_in_control)
# Mostrar el ARL
ARL_bajo_control
P_in_control
Curva_OC <- function(p, p0, n){
# LCL y UCL
LCL <- -3
UCL <- 3
# Convertir proporción p a Z
Z_LCL <- (LCL * sqrt(p0 * (1 - p0) / n)) + p0
Z_UCL <- (UCL * sqrt(p0 * (1 - p0) / n)) + p0
# Probabilidad de que Z esté dentro de los límites cuando p cambia
OC_p <- pbinom(Z_UCL * n, size = n, prob = p) - pbinom(Z_LCL * n, size = n, prob = p)
return(OC_p)
}
# Valores de p a simular (proporciones fuera de control)
p_values <- seq(0.05, 0.2, by = 0.01)
# Tamaños de muestra promedio
n_promedio <- mean(tamaños)
# Calcular la curva OC para cada valor de p
OC_curve <- sapply(p_values, Curva_OC, p0 = p0, n = n_promedio)
# Graficar la Curva OC
plot(p_values, OC_curve, type = "o", col = "#ff6f61", pch = 20,
xlab = "Proporción de no conformidad (p)", ylab = "Probabilidad de no detección (OC)",
main = "Curva de Operación Característica", cex.lab = 0.8, font.lab = 2, col.axis = '#423f32',
col.main = '#ff6f61', family = 'sans')
OC_curve
Curva_OC <- function(p, p0, n) {
# LCL y UCL
LCL <- -3
UCL <- 3
# Convertir proporción p a Z
Z_LCL <- (LCL * sqrt(p0 * (1 - p0) / n)) + p0
Z_UCL <- (UCL * sqrt(p0 * (1 - p0) / n)) + p0
# Imprimir los límites calculados para revisar si son válidos
print(paste("Z_LCL:", Z_LCL, "Z_UCL:", Z_UCL))
# Probabilidad de que Z esté dentro de los límites cuando p cambia
OC_p <- pbinom(Z_UCL * n, size = n, prob = p) - pbinom(Z_LCL * n, size = n, prob = p)
return(OC_p)
}
n <- seq(200, 400, 50)   # Tamaños de muestra posibles
p0 <- 0.1                # Proporción nominal de no conformidad
m = 30                   # Cantidad de muestras a generar
set.seed(22)             # Fijar semilla para replicabilidad
# Generar tamaños de muestra aleatorios
tamaños = sample(x = n, size = m, replace = TRUE)
# Generar muestras de una distribución binomial
muestras = rbinom(n = m, size = tamaños, prob = p0)
# Calcular proporciones de no conformidad
proporciones = muestras / tamaños
muestras
# Calcular proporciones de no conformidad
proporciones = muestras / tamaños
proporciones
proporciones
# Calcular proporciones de no conformidad
proporciones = muestras / tamaños
UCL <- 3  # Límite de control superior
LCL <- -3 # Límite de control inferior
StanCC <- function(n, P, p0){
Zi <- (P - p0) / sqrt(p0 * (1 - p0) / n)
return(Zi)
}
# Calcular los valores Zi para cada muestra
Zi_values <- StanCC(tamaños, proporciones, p0)
par(mar = c(5.1, 5.1, 4.1, 2.1), bg = '#fffbf7') # Configurar márgenes y fondo
plot(Zi_values, type = 'o', col = '#423f32', pch = 20, cex = 1.5, ylim = c(LCL, UCL), family = "sans", bty = "L",
xlab = 'Tiempo de medición', ylab = 'Valor de Zi para \n Prop. No Conformidad',  font.lab = 2, cex.lab = 0.8,
font = 3, font.main = 4, main = 'Carta de control Z con límites variables', cex.axis = 0.7, col.main = 'black',
sub = 'Proporción de no conformidad p = 0.1', font.sub = 2, cex.sub = 0.8, fg = '#423f32', col.sub = '#ff6f61')
# Líneas de guía
abline(h = seq(-3, 3, 0.5), col = '#d6c6b8', lty = 'dotted')
abline(v = seq(1, m, 5), col = '#d6c6b8', lty = 'dotted')
# Líneas de control superior e inferior
abline(h = UCL, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
abline(h = LCL, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
# Línea central (valor nominal de Z = 0)
abline(h = 0, col = '#6b8e8e', lwd = 1.2)
# Leyenda
legend(x = 25, y = -1.5 , legend = c('UCL & LCL', 'Obs', 'LC'), title = 'Lineas',
col = c('#ff6f61', '#423f32', '#6b8e8e'), lty = c('dashed', 'solid', 'solid'),
lwd = c(1.8, 1.8, 1.8), cex = 0.8, bty = 'n', bg = 'white', text.font = 2,
text.col = '#423f32')
# Función para calcular la probabilidad de estar dentro de los límites de control
Prob_in_control <- function(p0, n){
# Cálculo de Z utilizando la proporción nominal p0
LCL <- -3  # Límite inferior
UCL <- 3   # Límite superior
# La probabilidad de que Z esté dentro de los límites sigue una distribución normal estándar
P_in_control <- pnorm(UCL, mean = 0, sd = 1) - pnorm(LCL, mean = 0, sd = 1)
return(P_in_control)
}
# Calcular el ARL bajo control
P_in_control <- Prob_in_control(p0, tamaños)
ARL_bajo_control <- 1 / (1 - P_in_control)
# Mostrar el ARL
ARL_bajo_control
# Tamaños de muestra promedio
n_promedio <- mean(tamaños)
n_promedio
tamaños
# Calcular la curva OC para cada valor de p
OC_curve <- sapply(p_values, Curva_OC, p0 = p0, n = n_promedio)
# Graficar la Curva OC
plot(p_values, OC_curve, type = "o", col = "#ff6f61", pch = 20,
xlab = "Proporción de no conformidad (p)", ylab = "Probabilidad de no detección (OC)",
main = "Curva de Operación Característica", cex.lab = 0.8, font.lab = 2, col.axis = '#423f32',
col.main = '#ff6f61', family = 'sans')
P0_i <- c(0.00, 0.2, 0.025)
P0_i
P0_i <- seq(0.00, 0.2, 0.025)
P0_i
ARLs <- sapply(P0_i, function(p0_i) {
P_in_control_i <- Prob_in_control(p0_i, tamaños)
return(1 / (1 - P_in_control_i))
})
ARLs
ARLs <- seq(0, length(P0_i)
ARLs
ARLs <- seq(0, length(P0_i))
ARLs
for (i in 1:length(P0_i)){
P_in_control <- Prob_in_control(P0_i[i], tamaños)
ARLs[i] <- 1 / (1 - P_in_control)
}
ARLs
P0_i
# Función para calcular la probabilidad de estar dentro de los límites de control
Prob_in_control <- function(p0, n){
# Límite inferior y superior de control
LCL <- -3
UCL <- 3
# Calcular la desviación estándar para la proporción p0 y tamaño de muestra n
sigma_p <- sqrt(p0 * (1 - p0) / n)
# La probabilidad de que Z esté dentro de los límites de control
P_in_control <- pnorm(UCL, mean = 0, sd = sigma_p) - pnorm(LCL, mean = 0, sd = sigma_p)
return(P_in_control)
}
tamaños
# Tamaños de muestra específicos (en este caso fijo a 300, pero puede variar)
tamaños
P0_i
# Proporciones de no conformidad con corrimientos de 0.025
P0_i <- seq(0.00, 0.2, 0.025)
P0_i
ARLs
# Inicializar un vector para almacenar los ARLs
ARLs <- numeric(length(P0_i))
ARLs
# Calcular el ARL para cada proporción nominal
for (i in 1:length(P0_i)){
P_in_control <- Prob_in_control(P0_i[i], tamaños)
ARLs[i] <- 1 / (1 - P_in_control)
}
# Mostrar los ARLs calculados
ARLs
# Calcular el ARL bajo control
P_in_control <- Prob_in_control(p0, tamaños)
ARL_bajo_control <- 1 / (1 - P_in_control)
# Mostrar el ARL
ARL_bajo_control
n <- seq(200, 400, 50)   # Tamaños de muestra posibles
p0 <- 0.1                # Proporción nominal de no conformidad
m = 30                   # Cantidad de muestras a generar
set.seed(22)             # Fijar semilla para replicabilidad
# Generar tamaños de muestra aleatorios
tamaños = sample(x = n, size = m, replace = TRUE)
# Generar muestras de una distribución binomial
muestras = rbinom(n = m, size = tamaños, prob = p0)
# Calcular proporciones de no conformidad
proporciones = muestras / tamaños
UCL <- 3  # Límite de control superior
LCL <- -3 # Límite de control inferior
StanCC <- function(n, P, p0){
Zi <- (P - p0) / sqrt(p0 * (1 - p0) / n)
return(Zi)
}
# Calcular los valores Zi para cada muestra
Zi_values <- StanCC(tamaños, proporciones, p0)
par(mar = c(5.1, 5.1, 4.1, 2.1), bg = '#fffbf7') # Configurar márgenes y fondo
plot(Zi_values, type = 'o', col = '#423f32', pch = 20, cex = 1.5, ylim = c(LCL, UCL), family = "sans", bty = "L",
xlab = 'Tiempo de medición', ylab = 'Valor de Zi para \n Prop. No Conformidad',  font.lab = 2, cex.lab = 0.8,
font = 3, font.main = 4, main = 'Carta de control Z con límites variables', cex.axis = 0.7, col.main = 'black',
sub = 'Proporción de no conformidad p = 0.1', font.sub = 2, cex.sub = 0.8, fg = '#423f32', col.sub = '#ff6f61')
# Líneas de guía
abline(h = seq(-3, 3, 0.5), col = '#d6c6b8', lty = 'dotted')
abline(v = seq(1, m, 5), col = '#d6c6b8', lty = 'dotted')
# Líneas de control superior e inferior
abline(h = UCL, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
abline(h = LCL, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
# Línea central (valor nominal de Z = 0)
abline(h = 0, col = '#6b8e8e', lwd = 1.2)
# Leyenda
legend(x = 25, y = -1.5 , legend = c('UCL & LCL', 'Obs', 'LC'), title = 'Lineas',
col = c('#ff6f61', '#423f32', '#6b8e8e'), lty = c('dashed', 'solid', 'solid'),
lwd = c(1.8, 1.8, 1.8), cex = 0.8, bty = 'n', bg = 'white', text.font = 2,
text.col = '#423f32')
# Calcular el ARL bajo control
P_in_control <- Prob_in_control(p0, tamaños)
ARL_bajo_control <- 1 / (1 - P_in_control)
# Mostrar el ARL
ARL_bajo_control
# Función para calcular la probabilidad de estar dentro de los límites de control
Prob_in_control <- function(p0, n){
# Cálculo de Z utilizando la proporción nominal p0
LCL <- -3  # Límite inferior
UCL <- 3   # Límite superior
# La probabilidad de que Z esté dentro de los límites sigue una distribución normal estándar
P_in_control <- pnorm(UCL, mean = 0, sd = 1) - pnorm(LCL, mean = 0, sd = 1)
return(P_in_control)
}
# Calcular el ARL bajo control
P_in_control <- Prob_in_control(p0, tamaños)
ARL_bajo_control <- 1 / (1 - P_in_control)
# Mostrar el ARL
ARL_bajo_control
n <- seq(200, 400, 50)   # Tamaños de muestra posibles
p0 <- 0.1                # Proporción nominal de no conformidad
m = 30                   # Cantidad de muestras a generar
set.seed(22)             # Fijar semilla para replicabilidad
# Generar tamaños de muestra aleatorios
tamaños = sample(x = n, size = m, replace = TRUE)
# Generar muestras de una distribución binomial
muestras = rbinom(n = m, size = tamaños, prob = p0)
# Calcular proporciones de no conformidad
proporciones = muestras / tamaños
UCL <- 3  # Límite de control superior
LCL <- -3 # Límite de control inferior
StanCC <- function(n, P, p0){
Zi <- (P - p0) / sqrt(p0 * (1 - p0) / n)
return(Zi)
}
# Calcular los valores Zi para cada muestra
Zi_values <- StanCC(tamaños, proporciones, p0)
par(mar = c(5.1, 5.1, 4.1, 2.1), bg = '#fffbf7') # Configurar márgenes y fondo
plot(Zi_values, type = 'o', col = '#423f32', pch = 20, cex = 1.5, ylim = c(LCL, UCL), family = "sans", bty = "L",
xlab = 'Tiempo de medición', ylab = 'Valor de Zi para \n Prop. No Conformidad',  font.lab = 2, cex.lab = 0.8,
font = 3, font.main = 4, main = 'Carta de control Z con límites variables', cex.axis = 0.7, col.main = 'black',
sub = 'Proporción de no conformidad p = 0.1', font.sub = 2, cex.sub = 0.8, fg = '#423f32', col.sub = '#ff6f61')
# Líneas de guía
abline(h = seq(-3, 3, 0.5), col = '#d6c6b8', lty = 'dotted')
abline(v = seq(1, m, 5), col = '#d6c6b8', lty = 'dotted')
# Líneas de control superior e inferior
abline(h = UCL, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
abline(h = LCL, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
# Línea central (valor nominal de Z = 0)
abline(h = 0, col = '#6b8e8e', lwd = 1.2)
# Leyenda
legend(x = 25, y = -1.5 , legend = c('UCL & LCL', 'Obs', 'LC'), title = 'Lineas',
col = c('#ff6f61', '#423f32', '#6b8e8e'), lty = c('dashed', 'solid', 'solid'),
lwd = c(1.8, 1.8, 1.8), cex = 0.8, bty = 'n', bg = 'white', text.font = 2,
text.col = '#423f32')
# Función para calcular la probabilidad de estar dentro de los límites de control
Prob_in_control <- function(p0, n){
# Cálculo de Z utilizando la proporción nominal p0
LCL <- -3  # Límite inferior
UCL <- 3   # Límite superior
# La probabilidad de que Z esté dentro de los límites sigue una distribución normal estándar
P_in_control <- pnorm(UCL, mean = 0, sd = 1) - pnorm(LCL, mean = 0, sd = 1)
return(P_in_control)
}
# Calcular el ARL bajo control
P_in_control <- Prob_in_control(p0, tamaños)
ARL_bajo_control <- 1 / (1 - P_in_control)
# Mostrar el ARL
ARL_bajo_control
1/(1 - 0.0708)
1/(1 - 0.0027)
1/ 0.0027
P_in_control
1 - P_in_control
1 / (1 - P_in_control)
Matriz_Zi <- sapply(P0_i, function(p0_i) StanCC(tamaños, proporciones, p0_i))
P0_i <- seq(0.00, 0.2, 0.025)
Matriz_Zi <- sapply(P0_i, function(p0_i) StanCC(tamaños, proporciones, p0_i))
Matriz_Zi
P0_i <- seq(0.025, 0.2, 0.025)
Matriz_Zi <- sapply(P0_i, function(p0_i) StanCC(tamaños, proporciones, p0_i))
Matriz_Zi
par(mar = c(5.1, 5.1, 4.1, 2.1), bg = '#fffbf7') # Configurar márgenes y fondo
plot(Matriz_Zi, type = 'o', col = '#423f32', pch = 20, cex = 1.5, ylim = c(LCL, UCL), family = "sans", bty = "L",
xlab = 'Tiempo de medición', ylab = 'Valor de Zi para \n Prop. No Conformidad',  font.lab = 2, cex.lab = 0.8,
font = 3, font.main = 4, main = 'Carta de control Z con límites variables', cex.axis = 0.7, col.main = 'black',
sub = 'Proporción de no conformidad p = 0.1', font.sub = 2, cex.sub = 0.8, fg = '#423f32', col.sub = '#ff6f61')
# Líneas de guía
abline(h = seq(-3, 3, 0.5), col = '#d6c6b8', lty = 'dotted')
abline(v = seq(1, m, 5), col = '#d6c6b8', lty = 'dotted')
# Líneas de control superior e inferior
abline(h = UCL, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
abline(h = LCL, col = '#ff6f61', lty = 'dashed', lwd = 1.8)
# Línea central (valor nominal de Z = 0)
abline(h = 0, col = '#6b8e8e', lwd = 1.2)
ARL_i <- sapply(P0_i, function(p0_i) 1 / (1 - Prob_in_control(p0_i, tamaños)))
ARL_i
Matriz_Zi
colMeans(Matriz_Zi)
var(Matriz_Zi)
