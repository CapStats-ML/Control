tibble_logpasajeros%>%mutate(diff_Logpasa=Logpasa-lag(Logpasa))%>%plot_time_series(Fecha,diff_Logpasa)
tibble_logpasajeros<-tibble_logpasajeros%>%mutate(diff_Logpasa=Logpasa-lag(Logpasa))
###Diferenciando con base en el objeto ts
dlAirPass<-diff(lAirPass)
plot(dlAirPass)
library(astsa)
par(mar = c(3,2,3,2))
astsa::lag1.plot(dlAirPass, 12,corr=T)
acf(dlAirPass, 48, main="Serie diferenciada y con logaritmo de pasajeros")
pacf(dlAirPass, 48)
library(nonlinearTseries)
library(tseriesChaos)
et=rnorm(1100,0,1)
xt=rep(0,1100)
for(t in 13:1100)
{
xt[t]=(xt[t-1]-1)/(xt[t-12]^2+1)+et[t]
}
xtsimul=as.ts(xt[101:1100])
length(xtsimul)
plot(xtsimul)
acf(xtsimul)
par(mar = c(3,2,3,2))
astsa::lag1.plot(xtsimul, 12,corr = F)
nonlinearTseries::mutualInformation(xtsimul,lag.max = 100,n.partitions = 50,units = "Bits",do.plot = TRUE) #c("Nats", "Bits", "Bans")
pacf(xtsimul)
tseriesChaos::mutual(xtsimul, partitions = 50, lag.max = 100, plot=TRUE)
###Dado que la serie es mensual, monthplot permite hacer los gráficos de las subseries.
monthplot(dlAirPass) ##Note hay meses muchas subseries están centradas alrededor de valores diferentes usando el objeto ts
tibble_logpasajeros %>%na.omit()|>
mutate(
Mes = str_c("", as.character(lubridate::month(Fecha,label=TRUE)))
) %>%
plot_time_series(
.date_var = Fecha,
.value = diff_Logpasa,
.facet_vars = Mes,
.facet_ncol = 4,
.color_var = Mes,
.facet_scales = "fixed",
.interactive = FALSE,
.legend_show = FALSE,
.smooth = FALSE
)
library(forecast)
ggseasonplot(dlAirPass)
##Basado en el objeto tibble
tibble_logpasajeros%>%na.omit()%>%plot_seasonal_diagnostics(.date_var = Fecha,.value = diff_Logpasa,.feature_set = c("month.lbl"),.geom="boxplot")
ggplot(tibble_logpasajeros %>%na.omit()|>
mutate(
Mes = str_c("Mes ", as.character(lubridate::month(Fecha)))
), aes(x = diff_Logpasa)) +
geom_density(aes(fill = Mes)) +
ggtitle("LosPass - Estimación de la densidad vía Kernel por mes") +
facet_grid(rows = vars(as.factor(Mes)))
spectrum(as.numeric(dlAirPass),log='no')
install.packages('IRkernel')
IRkernel::installspec()
library(qcr)
knitr::opts_chunk$set(echo = TRUE)
#####Transformación Box-Cox
#library(FitAR)
library(forecast)
data("AirPassengers")
plot(AirPassengers)
#####Transformación Box-Cox
#library(FitAR)
library(forecast)
forecast::BoxCox.lambda(AirPassengers, method = "guerrero", lower = 0, upper = 2)
##method="loglik"
#FitAR::BoxCox(AirPassengers)
#air.arima<-arima(AirPassengers, c(0,1,1), seasonal=list(order=c(0,1,1), period=12))
#FitAR::BoxCox(air.arima)
lAirPass=log(AirPassengers)
par(mfrow=c(2,1))
plot(AirPassengers)
plot(lAirPass)
fltr <- c(1/2, rep(1, times = 11), 1/2)/12   ##q=6
fltr
## estimate of trend
lAirPass.trend <- stats::filter(lAirPass, filter = fltr, method = "convo", sides = 2)
## plot the trend
#x11()
par(mfrow=c(2,1))
plot(lAirPass)
plot.ts(lAirPass.trend, ylab = "Trend", cex = 1)
lAirPass.1T <- lAirPass - lAirPass.trend
## plot the monthly seasonal effects
plot.ts(lAirPass.1T, ylab = "Seasonal effect", xlab = "Month", cex = 1)
## length of ts
ll <- length(lAirPass.1T)
## frequency (ie, 12)
ff <- frequency(lAirPass.1T)
## number of periods (years); %/% is integer division
periods <- ll%/%ff
## index of cumulative month
index <- seq(1, ll, by = ff) - 1
## get mean by month
mm <- numeric(ff)
for (i in 1:ff) {
mm[i] <- mean(lAirPass.1T[index + i], na.rm = TRUE)
}
## subtract mean to make overall mean=0
mm <- mm - mean(mm)
## plot the monthly seasonal effects
plot.ts(mm, ylab = "Seasonal effect", xlab = "Month", cex = 1)
## create ts object for season
lAirPass.seas <- ts(rep(mm, periods + 1)[seq(ll)], start = start(lAirPass.1T),
frequency = ff)
## random errors over time
lAirPass.err <- lAirPass - lAirPass.trend - lAirPass.seas
## plot the obs ts, trend & seasonal effect
plot(cbind(lAirPass, lAirPass.trend, lAirPass.seas, lAirPass.err), main = "", yax.flip = TRUE)
lAirPass.trendma=forecast::ma(lAirPass,order=13)
lAirPass.trendma-lAirPass.trend
####Uso de la función decompose
deslAirPass=decompose(lAirPass)
plot(deslAirPass)
deslAirPass
library(seasonal)
library(ggplot2)
library(fpp)
AirPassengers %>% seas(x11="") -> fit  #%>% Operador Pipe
autoplot(fit) + ggtitle("X11 decomposition of Aipassengers")
data(elecequip)
autoplot(elecequip)
elecequip %>% seas(x11="") -> fit
autoplot(elecequip, series="Data") +
autolayer(trendcycle(fit), series="Trend") +
autolayer(seasadj(fit), series="Seasonally Adjusted") +
xlab("Year") + ylab("New orders index") +
ggtitle("Electrical equipment manufacturing (Euro area)") +
scale_colour_manual(values=c("gray","blue","red"),
breaks=c("Data","Seasonally Adjusted","Trend"))
library(dplyr)
library(fpp3)
library(fpp)
library(fable)
library(feasts)
data(elecequip)
?elecequip
elecequip
autoplot(elecequip)
elecequip_tsibble=as_tsibble(elecequip)
elecequip_tsibble%>%gg_subseries(value,period=12)
elecequip_tsibble<-elecequip_tsibble%>%mutate(diff_value=difference(value))
elecequip_tsibble%>%gg_subseries(diff_value,period=12)
###La base de datos "elecequip" está en en el paquete fpp
###Note que el operador %>% pipe permite concatenar múltiples dplyr operaciones
###Manufacture of electrical equipment: computer, electronic and optical products
elecequip %>%
stats::stl(t.window=13, s.window="periodic", robust=TRUE) %>%
autoplot()
###usando libro fpp3
elecequip_tsibble=as_tsibble(elecequip)
elecequip_tsibble %>%
model(
STL(value ~ trend(window = 13) +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
fit <- stl(elecequip, t.window=13, s.window="periodic",
robust=TRUE)
fit %>% seasadj() %>% naive() %>%
autoplot() + ylab("Nuevo índices ordenados.") +
ggtitle("Pronóstico Naive de la componente ajustada estacionalmente")
###El método naive consiste en que la predicción es el último valor real de la serie(o el de una caminata aleatoria).
#Ahora se re-estacionalizan los datos añadiendo
###Los pronósticos de la componente estacional.
fit %>% forecast(method="naive") %>%
autoplot() + ylab("New orders index")
###Note que la obtención de los pronósticos  es obtenida paso a paso.
###Otra forma de hacerlo es usando la función stlf
fcast1 <- stlf(elecequip, method='naive')
fcast <- stlf(elecequip, method='ets')
###Ajuste usando STL de feasts y model
fit_elecequip_tsibble =elecequip_tsibble%>%
model(stlf=decomposition_model(STL(value ~ trend(window = 13) +
season(window = "periodic"),
robust = TRUE),NAIVE(season_adjust)))
fit_elecequip_tsibble%>%fabletools::forecast()%>%autoplot(elecequip_tsibble)+ labs(y=" a",title=" b")
Pronostico<-fit_elecequip_tsibble%>%fabletools::forecast()
Pronostico
###Por defecto hace el pronóstico para el doble del ciclo estacional
forecast::forecast(HWAP_inic,h=12,level =0.95,lambda = 0)
library(forecast)
plot(lAirPass)
tsibble_AirPass=as_tsibble(AirPassengers)
tsibble_lAirPass=as_tsibble(lAirPass)
HWAP_inic=stats::HoltWinters(lAirPass,alpha=NULL,beta=FALSE,gamma=FALSE)
plot(HWAP_inic)
HWAP_inic
forecast::forecast(HWAP_inic,h=12,level =0.95,lambda = 0)
plot(forecast::forecast(HWAP_inic,h=12,level =0.95,lambda = 0))
HWAP=stats::HoltWinters(lAirPass,seasonal="additive") ##Puede establecer beta=F y/0 gamma=F, además el objeto debe ser de clase ts.
HWAP_1=forecast::hw(lAirPass,seasonal="additive",damped=TRUE)  ###También se puede usar holt
plot(HWAP)
plot(forecast::forecast(HWAP,h=12,level =0.95,lambda = 0))
plot(HWAP_1)
ajustados=fitted(HWAP)
plot(ajustados)
ajustados
HWAP
#####
summary(HWAP_1)
####
predictionHWAP_1=forecast::forecast(HWAP,h=12,level =0.95,lambda = 0)
predictionHWAP_1
plot(predictionHWAP_1)
predictionHWAP_2=predict(HWAP,n.ahead = 12, prediction.interval = T, level = 0.95)
predictionHWAP_2=forecast::InvBoxCox(predictionHWAP_2,lambda=0)
predictionHWAP_2
####Usando objeto tsibble con ETS de fable, "A":additive "M": multiplicative, "N":nada, "Ad" "Md" damped. Note que hay algunos parámetros que se pueden establecer en cero. Además usted acña puede trabajar con la serie original.
ajustepass=tsibble_lAirPass%>%
model(ETS(value~ error("A")+trend("A")+season("A")))
pronostico=ajustepass%>%
fabletools::forecast(h=12)
pronostico
pronostico%>%autoplot(tsibble_lAirPass)+geom_line(aes(y=.fitted),col="#D55E00",data=augment(ajustepass))+labs(y=" ",title="Pronóstico u ajustados")+guides(colour="none")
####Datos originales######
ajustepass_orig=tsibble_AirPass%>%
model(ETS(log(value)~ error("A")+trend("A")+season("A")))
pronostico_orig=ajustepass_orig%>%
fabletools::forecast(h=12)
pronostico_orig
pronostico_orig%>%autoplot(tsibble_AirPass)+geom_line(aes(y=.fitted),col="#D55E00",data=augment(ajustepass_orig))+labs(y=" ",title="Pronóstico u ajustados")+guides(colour="none")
modelos<-tsibble_lAirPass%>%
model(ets=ETS(value~ error("A")+trend("A")+season("A")),
stl=decomposition_model(STL(value ~ trend(window = 13) +
season(window = "periodic"),
robust = TRUE),NAIVE(season_adjust)))
modelos
modelos%>%fabletools::forecast(h=12)%>%
autoplot(tsibble_lAirPass)
library(dplyr)
library(parsnip)
library(rsample)
library(timetk)
library(modeltime)
library(tsibble)
library(tidymodels)
###Creación del objeto tibble
lAirPass_tbl<-as_tibble(as_tsibble(lAirPass))
lAirPass_tbl$index=as.Date(lAirPass_tbl$index)
lAirPass_tbl=rename(lAirPass_tbl,Fecha=index,logAirpass=value)
lAirPass_tbl<-lAirPass_tbl%>%mutate(Airpass=exp(logAirpass))
lAirPass_tbl
###División en entrenamiento y prueba
splits_lAirPass_tbl=timetk::time_series_split(lAirPass_tbl,date_var=Fecha,assess = 12,cumulative = TRUE)
splits_lAirPass_tbl%>% tk_time_series_cv_plan()%>%
plot_time_series_cv_plan(Fecha,logAirpass)
splits_lAirPass_tbl
#Ajuste del modelo suavizamineto exponencial
?modeltime::exp_smoothing
ets_logAirpass<-modeltime::exp_smoothing(
error="additive",
trend="additive",
season="additive"
)%>%
set_engine("ets")%>%
fit(logAirpass ~ Fecha,data=training(splits_lAirPass_tbl))
# Modeltime y creación de una tabla con el objeto ajustado sobre el conjunto de prueba y pronóstico sobre el conjunto de prueba.
modeltime_table(ets_logAirpass) %>%
modeltime_calibrate(testing(splits_lAirPass_tbl))%>%
modeltime_forecast(
new_data = testing(splits_lAirPass_tbl),
actual_data = lAirPass_tbl
)%>%
plot_modeltime_forecast(.conf_interval_fill = "lightblue")
##Se crea un objeto de pronóstico con los valores sobre el conjunto de prueba.
pronostico_ets<-modeltime_table(ets_logAirpass) %>%
modeltime_calibrate(testing(splits_lAirPass_tbl))%>%
modeltime_forecast(
new_data = testing(splits_lAirPass_tbl),
actual_data = lAirPass_tbl
)
pronostico_ets
####Los mismo que hicimos anteriormente pero ahora creando objetos
## Modeltime
model_tbl<-modeltime_table(ets_logAirpass)
## Calibración
calibration_tbl<-model_tbl%>%
modeltime_calibrate(testing(splits_lAirPass_tbl))
## Pronóstico sobre el conjunto de prueba
calibration_tbl%>%
modeltime_forecast(
new_data = testing(splits_lAirPass_tbl),
actual_data = lAirPass_tbl
)
###Residuales
residuales_ajuste<-model_tbl%>%
modeltime_calibrate(new_data=training(splits_lAirPass_tbl))%>%
modeltime_residuals()
residuales_ajuste%>%plot_modeltime_residuals(
.type="timeplot",
.interactive = TRUE)
### Precisión de los pronósticos
calibration_tbl%>%
modeltime_accuracy()
## Re-ajuste y predicción de valores futuros
re_ajuste<-calibration_tbl%>%
modeltime_refit(data=lAirPass_tbl)
re_ajuste%>%
modeltime_forecast(h=12,
actual_data = lAirPass_tbl
)%>%
plot_modeltime_forecast()
?modeltime::exp_smoothing
ets_logAirpass_fixed<-modeltime::exp_smoothing(
error="additive",
trend="additive",
season="additive",
smooth_level=0.5,
smooth_trend=0.02,
smooth_seasonal=0.01
)%>%
set_engine("ets")%>%
fit(logAirpass ~ Fecha,data=training(splits_lAirPass_tbl))
# modeltime
modeltime_table(ets_logAirpass_fixed) %>%
modeltime_calibrate(testing(splits_lAirPass_tbl))%>%
modeltime_forecast(
new_data = testing(splits_lAirPass_tbl),
actual_data = lAirPass_tbl
)%>%
plot_modeltime_forecast(.conf_interval_fill = "lightblue")
pronostico_ets
## Modeltime
model_tbl_fixed<-modeltime_table(ets_logAirpass_fixed)
## Calibración
calibration_tbl_fixed<-model_tbl_fixed%>%
modeltime_calibrate(testing(splits_lAirPass_tbl))
###
## Prueba de pronóstico
calibration_tbl_fixed%>%
modeltime_forecast(
new_data = testing(splits_lAirPass_tbl),
actual_data = lAirPass_tbl
)
### Precisión de los pronósticos
calibration_tbl_fixed%>%
modeltime_accuracy()
library(readxl)
Colcap<- read_excel("Datos históricos COLCAP-3.xlsx")
Colcap
splits_Colcap_tbl=timetk::time_series_split(Colcap,date_var=Fecha,assess = 15,cumulative = TRUE)
splits_Colcap_tbl%>% tk_time_series_cv_plan()%>%
plot_time_series_cv_plan(Fecha,Ultimo)
ets_Colcap<-modeltime::exp_smoothing(
error="additive",
trend="additive",
season="none"
)%>%
set_engine("ets")%>%
fit(Ultimo ~ Fecha,data=training(splits_Colcap_tbl))
# Modeltime ----
modeltime_table(ets_Colcap) %>%
modeltime_calibrate(testing(splits_Colcap_tbl))%>%
modeltime_forecast(
new_data = testing(splits_Colcap_tbl),
actual_data = Colcap
)%>%
plot_modeltime_forecast(.conf_interval_fill = "lightblue")
h=1
lAirPass ###Vamos a trabajar con la serie en escala logarítmica
#HWAP=stats::HoltWinters(lAirPass,seasonal="additive")
### Definición o creación del conjunto de entrenamiento y de Prueba##
lserie=length(lAirPass)
ntrain=trunc(length(lAirPass)*0.85) ##% del datos en el conjunto de entrenamiento es del 85%.
ntrain
time(lAirPass)
time(lAirPass)[ntrain]###Me entrega la ultima fecha de la posición ntrain
train=window(lAirPass,end=time(lAirPass)[ntrain])
test=window(lAirPass,start=time(lAirPass)[ntrain]+1/12)##1/12 porque es la fracción que corresponde a un mes
length(train)
ntest=length(test)
ntest ##Me define el valor de origins, o de ventanas de rolling.
lserie ### Comparar los valores
fchstepahe=matrix(0,nrow=ntest,ncol=h) ##Crea una Columna para los h-pasos adelante
### verval contiene los verdaderos valores de la serie en el conjunto de prueba con los que se compararán los pronósticos.
verval=cbind(test[1:ntest])
for(j in 2:h){
verval=cbind(verval,c(test[j:ntest],rep(NA,j-1)))
}
verval=cbind(test[1:ntest],c(test[2:ntest],NA),c(test[3:ntest],NA,NA))
####Ajuste del modelo con los datos de entrenamiento
HWAP_train=stats::HoltWinters(train,seasonal="additive")
HWAP_train$alpha
HWAP_train$beta
HWAP_train$gamma
###Observación: Note que que esos son las estimaciones de los parámetros de suavizamiento. Se puede también hacer una grilla de valores para explorar si hay unos valores mejores.
# por ejemplo como sigue:
require(utils)
suav_inputs=cbind(seq(0.001,0.999,0.1),seq(0.001,0.999,0.1),seq(0.001,0.999,0.1))
colnames(suav_inputs)<-c("alpha","beta","gamma")
suav_inputs_tbl=tibble::as_tibble(suav_inputs)
grilla_suav=expand.grid(alpha=suav_inputs_tbl$alpha,beta=suav_inputs_tbl$beta,gamma=suav_inputs_tbl$gamma) ##Grilla de Valores
####Se crean las ventanas de rolling y se obtiene los h-pronósticos para cada ventana(hay ntest posibles ventanas)
for(i in 1:(ntest))
{
x=window(lAirPass,end=time(lAirPass)[ntrain]+(i-1)/12)
print(length(x))
refit=stats::HoltWinters(x,seasonal="additive",alpha=HWAP_train$alpha,beta=HWAP_train$beta,gamma=HWAP_train$gamma)
fchstepahe[i,]=as.numeric(forecast::forecast(refit,h=h)$mean)
}
fchstepahe
errores_pred=verval -fchstepahe ##Observación: debo devolver los pronósticos y los verdaderos valores a la escala original si es necesario.
h=1
lAirPass ###Vamos a trabajar con la serie en escala logarítmica
#HWAP=stats::HoltWinters(lAirPass,seasonal="additive")
### Definición o creación del conjunto de entrenamiento y de Prueba##
lserie=length(lAirPass)
ntrain=trunc(length(lAirPass)*0.85) ##% del datos en el conjunto de entrenamiento es del 85%.
ntrain
time(lAirPass)
time(lAirPass)[ntrain]###Me entrega la ultima fecha de la posición ntrain
train=window(lAirPass,end=time(lAirPass)[ntrain])
test=window(lAirPass,start=time(lAirPass)[ntrain]+1/12)##1/12 porque es la fracción que corresponde a un mes
length(train)
ntest=length(test)
ntest ##Me define el valor de origins, o de ventanas de rolling.
lserie ### Comparar los valores
fchstepahe=matrix(0,nrow=ntest,ncol=h) ##Crea una Columna para los h-pasos adelante
### verval contiene los verdaderos valores de la serie en el conjunto de prueba con los que se compararán los pronósticos.
verval=cbind(test[1:ntest])
for(j in 2:h){
verval=cbind(verval,c(test[j:ntest],rep(NA,j-1)))
}
verval
h=1
lAirPass ###Vamos a trabajar con la serie en escala logarítmica
#HWAP=stats::HoltWinters(lAirPass,seasonal="additive")
### Definición o creación del conjunto de entrenamiento y de Prueba##
lserie=length(lAirPass)
ntrain=trunc(length(lAirPass)*0.85) ##% del datos en el conjunto de entrenamiento es del 85%.
ntrain
time(lAirPass)
time(lAirPass)[ntrain]###Me entrega la ultima fecha de la posición ntrain
train=window(lAirPass,end=time(lAirPass)[ntrain])
test=window(lAirPass,start=time(lAirPass)[ntrain]+1/12)##1/12 porque es la fracción que corresponde a un mes
length(train)
ntest=length(test)
ntest ##Me define el valor de origins, o de ventanas de rolling.
lserie ### Comparar los valores
fchstepahe=matrix(0,nrow=ntest,ncol=h) ##Crea una Columna para los h-pasos adelante
### verval contiene los verdaderos valores de la serie en el conjunto de prueba con los que se compararán los pronósticos.
verval=cbind(test[1:ntest])
for(j in 2:h){
verval=cbind(verval,c(test[j:ntest],rep(NA,j-1)))
}
verval
verval=cbind(test[1:ntest],c(test[2:ntest],NA),c(test[3:ntest],NA,NA))
####Ajuste del modelo con los datos de entrenamiento
HWAP_train=stats::HoltWinters(train,seasonal="additive")
HWAP_train$alpha
HWAP_train$beta
HWAP_train$gamma
###Observación: Note que que esos son las estimaciones de los parámetros de suavizamiento. Se puede también hacer una grilla de valores para explorar si hay unos valores mejores.
# por ejemplo como sigue:
require(utils)
suav_inputs=cbind(seq(0.001,0.999,0.1),seq(0.001,0.999,0.1),seq(0.001,0.999,0.1))
colnames(suav_inputs)<-c("alpha","beta","gamma")
suav_inputs_tbl=tibble::as_tibble(suav_inputs)
grilla_suav=expand.grid(alpha=suav_inputs_tbl$alpha,beta=suav_inputs_tbl$beta,gamma=suav_inputs_tbl$gamma) ##Grilla de Valores
####Se crean las ventanas de rolling y se obtiene los h-pronósticos para cada ventana(hay ntest posibles ventanas)
for(i in 1:(ntest))
{
x=window(lAirPass,end=time(lAirPass)[ntrain]+(i-1)/12)
print(length(x))
refit=stats::HoltWinters(x,seasonal="additive",alpha=HWAP_train$alpha,beta=HWAP_train$beta,gamma=HWAP_train$gamma)
fchstepahe[i,]=as.numeric(forecast::forecast(refit,h=h)$mean)
}
fchstepahe
errores_pred=verval -fchstepahe ##Observación: debo devolver los pronósticos y los verdaderos valores a la escala original si es necesario.
verval
fchstepahe
library(forecast)
library(greybox)
HWAP_train=stats::HoltWinters(train,seasonal="additive")
?ro
h=3
ourCallETS <- "forecast::forecast(stats::HoltWinters(x=data,alpha=HWAP_train$alpha,beta=HWAP_train$beta,gamma=HWAP_train$gamma),h=h,level=95)"
###Note que x=data es solo un argumento indeterminado.
ourValueETS <- c("mean","lower","upper")
origins=ntest   ##número de rolling windows
Valoresretornados1 <- ro(lAirPass, h=h, origins=origins, call=ourCallETS, value=ourValueETS,ci=FALSE,co=FALSE)
t(Valoresretornados1$holdout)## Permiten verificar los verdaderos valores h-pasos adelante.
t(Valoresretornados1$mean)
sqrt(apply((Valoresretornados1$holdout -Valoresretornados1$mean)^2,1,mean,na.rm=TRUE)) ### Se calcula la raíz del error cuadrático medio de predicción
apply(abs(Valoresretornados1$holdout - -Valoresretornados1$mean),1,mean,na.rm=TRUE) / mean(Valoresretornados1$actuals) ### Error medio absoluto escalado
setwd("~/DOCUMENTOS PERSONAJES/CESAR/Control")
?lm
## Annette Dobson (1990) "An Introduction to Generalized Linear Models".
## Page 9: Plant Weight Data.
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
anova(lm.D9)
names(lm.D9)
summary.lm(lm.D9)
aov(lm.D9)
lm.influence(lm.D9)
model.matrix(lm)
model.matrix(weight~group)
library(knitr)
Sys.getenv("R_ENVIRON")
Sys.getenv("R_HOME")
Sys.getenv("R_ENVIRON")
